//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Keys"",
            ""id"": ""aa00e0a3-9971-4b97-9262-273f07864fe1"",
            ""actions"": [
                {
                    ""name"": ""PermanentAttachCamera"",
                    ""type"": ""Button"",
                    ""id"": ""df2a5f1d-541c-4cdc-8a9f-b95726598222"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TempAttachCamera"",
                    ""type"": ""Button"",
                    ""id"": ""7cb038e9-23f8-4444-be14-3ad852d998d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""960e37eb-45bb-4161-88fe-52e89710a8c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c0a6408-9dc0-4789-9cdd-1c5593d11953"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PermanentAttachCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc36c634-abc0-44cf-b1e7-885f22a67409"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TempAttachCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cba8bf01-f650-4086-be67-560c63845d5a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""0862236b-6e1d-4656-a013-0b9331232232"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""42c3dcdb-aaf5-4a30-a5bb-2d42219b86cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""1ad11f3b-62a2-43ac-ae9a-804d11c6e851"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7bc8a9c9-1f11-4e64-88be-158ae2473d0e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82833c24-6442-400f-b7ff-78f23d27fa68"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_PermanentAttachCamera = m_Keys.FindAction("PermanentAttachCamera", throwIfNotFound: true);
        m_Keys_TempAttachCamera = m_Keys.FindAction("TempAttachCamera", throwIfNotFound: true);
        m_Keys_Menu = m_Keys.FindAction("Menu", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_RightClick = m_Mouse.FindAction("RightClick", throwIfNotFound: true);
        m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keys
    private readonly InputActionMap m_Keys;
    private IKeysActions m_KeysActionsCallbackInterface;
    private readonly InputAction m_Keys_PermanentAttachCamera;
    private readonly InputAction m_Keys_TempAttachCamera;
    private readonly InputAction m_Keys_Menu;
    public struct KeysActions
    {
        private @PlayerActions m_Wrapper;
        public KeysActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PermanentAttachCamera => m_Wrapper.m_Keys_PermanentAttachCamera;
        public InputAction @TempAttachCamera => m_Wrapper.m_Keys_TempAttachCamera;
        public InputAction @Menu => m_Wrapper.m_Keys_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void SetCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterface != null)
            {
                @PermanentAttachCamera.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnPermanentAttachCamera;
                @PermanentAttachCamera.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnPermanentAttachCamera;
                @PermanentAttachCamera.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnPermanentAttachCamera;
                @TempAttachCamera.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnTempAttachCamera;
                @TempAttachCamera.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnTempAttachCamera;
                @TempAttachCamera.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnTempAttachCamera;
                @Menu.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_KeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PermanentAttachCamera.started += instance.OnPermanentAttachCamera;
                @PermanentAttachCamera.performed += instance.OnPermanentAttachCamera;
                @PermanentAttachCamera.canceled += instance.OnPermanentAttachCamera;
                @TempAttachCamera.started += instance.OnTempAttachCamera;
                @TempAttachCamera.performed += instance.OnTempAttachCamera;
                @TempAttachCamera.canceled += instance.OnTempAttachCamera;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public KeysActions @Keys => new KeysActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_RightClick;
    private readonly InputAction m_Mouse_MousePosition;
    public struct MouseActions
    {
        private @PlayerActions m_Wrapper;
        public MouseActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_Mouse_RightClick;
        public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @RightClick.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnRightClick;
                @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    public interface IKeysActions
    {
        void OnPermanentAttachCamera(InputAction.CallbackContext context);
        void OnTempAttachCamera(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
